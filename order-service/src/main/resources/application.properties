## setting datasource for initialize entity manager factory of JPA
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/OrderService
spring.datasource.username=root
spring.datasource.password=123456789

## setting hibernate properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

# random port
server.port=0
# set name for application
spring.application.name=order-service
# set url of discovery server to call all service
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka

## setting actuator
# enable circuit breaker for actuator
management.health.circuitbreakers.enabled=true
# expose all endpoints of actuator for use (by default actuator just expose health and matrix endpoint)
management.endpoints.web.exposure.include=*
# setting show health endpoint in detail
management.endpoint.health.show-details=always

## setting resilience4j properties
## 'inventory' is Circuit Breaker instance, we register it below
# register indicator(ch? báo) to see status of inventory (closed, open, half-open)
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
# Circuit Breaker se duy tri mot bo dem su kien voi kich thuoc toi da là 10 su kien
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# setting Circuit Breaker instance does not change status immediately, have to count
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
# after count 5 times that Circuit Breaker instance does not react, it will change status
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
# if number of error call over 50 percent (calculate on sliding-window-size), Circuit Breaker instance change status
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
# if Circuit Breaker instance state is open, after 5s, resilience will change status of instance to half-open
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
# in half-open state, resilience will call 3 call to Circuit Breaker instance
# - if all successful, resilience change instance state to closed else open
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
# allow inventory change Circuit Breaker instance from open to half-open automatically
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

## setting resilience4j timeout properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
resilience4j.timelimiter.instances.inventory.cancel-running-future=true

## setting resilience4j retry properties
# if first call does not response in 3 second, resilience will call total 3 times in 5 second again,
# if still not response, resilience will come with default flow.
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s


## setting distributed tracing
# setting uri for spring sent info of request to zipkin server
spring.zipkin.base-url=http://localhost:9411/
# spring send 100% info of request to zipkin server
spring.sleuth.sampler.probability=1.0
#
spring.sleuth.integration.enabled=true
spring.cloud.compatibility-verifier.enabled=false

## Kafka Properties
spring.kafka.bootstrap-servers=http://localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.vvt.orderservice.event.OrderPlacedEvent